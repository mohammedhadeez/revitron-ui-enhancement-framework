# Revitron UI Enhancement Framework Configuration
# ===============================================
# Production-ready configuration addressing self-reflection analysis fixes
# Version: 2.0 (Self-Reflection Integrated)

# FRAMEWORK QUALITY TARGETS (Addressing Self-Reflection Issues)
quality_targets:
  overall_performance_target: 10.0        # Target: 10/10 (Previous: 6/10)
  research_completeness_required: 1.0     # 100% research completion mandatory
  validation_coverage_required: 1.0       # 100% validation coverage mandatory
  duplicate_tolerance: 0.0                # 0% duplicate suggestions allowed
  technical_accuracy_threshold: 0.95      # 95% minimum technical accuracy

# RESEARCH FRAMEWORK CONFIGURATION
research:
  # Primary research sources (CRITICAL - ALL must be accessible)
  primary_sources:
    - name: "Revitron Documentation"
      url: "https://revitron.readthedocs.io/en/latest/"
      priority: 1
      access_method: "selenium"
      timeout: 30
      retry_attempts: 3
    
    - name: "Revitron GitHub Repository"
      url: "https://github.com/revitron/revitron"
      priority: 1
      access_method: "requests"
      timeout: 30
      retry_attempts: 3
    
    - name: "PyRevit Documentation"
      url: "https://pyrevit.readthedocs.io/en/latest/"
      priority: 1
      access_method: "selenium"
      timeout: 30
      retry_attempts: 3
    
    - name: "Revit API Documentation"
      url: "https://www.revitapidocs.com/"
      priority: 1
      access_method: "selenium"
      timeout: 30
      retry_attempts: 3

  # Research quality requirements
  minimum_source_accessibility: 0.95      # 95% of primary sources must be accessible
  content_extraction_threshold: 0.9       # 90% successful content extraction required
  api_capability_detection_minimum: 50    # Minimum 50 API capabilities must be detected
  
  # Selenium configuration
  selenium_options:
    headless: true
    window_size: [1920, 1080]
    timeout: 30
    implicit_wait: 10

# VALIDATION ENGINE CONFIGURATION
validation:
  # Coverage requirements (Addressing Critical Issue #2)
  mandatory_coverage: 1.0                 # 100% validation coverage required
  
  # Validation criteria thresholds
  criteria_thresholds:
    technical_feasibility: 0.8            # 80% technical feasibility required
    duplicate_check: 1.0                  # 100% - no duplicates allowed
    aec_value: 0.7                        # 70% AEC industry value required
    implementation_complexity: 0.6         # 60% implementation feasibility
    api_compatibility: 0.9                # 90% API compatibility required
    innovation_score: 0.5                 # 50% novelty minimum
    resource_requirements: 0.7            # 70% resource feasibility
  
  # Duplicate detection settings
  duplicate_detection:
    similarity_threshold: 0.8             # 80% similarity = duplicate
    text_analysis_method: "word_overlap"  # word_overlap, semantic, hybrid
    existing_function_sources:
      - "revitron_api_functions"
      - "pyrevit_built_in_commands"
      - "revit_native_tools"
  
  # AEC value assessment
  aec_value_assessment:
    workflow_categories:
      - "design_optimization"
      - "documentation_automation"  
      - "quality_control"
      - "coordination"
      - "analysis"
      - "compliance"
      - "productivity"
    
    industry_keywords:
      - "bim"
      - "revit"
      - "architectural"
      - "engineering"
      - "construction"
      - "aec"
    
    problem_solving_indicators:
      - "optimize"
      - "automate"
      - "improve"
      - "enhance"
      - "streamline"
      - "coordinate"

# BUTTON GENERATION CONFIGURATION
generation:
  # Generation targets
  default_button_count: 250               # Default number of buttons to generate
  max_buttons_per_category: 50            # Maximum buttons per category
  
  # Quality requirements for generated suggestions
  minimum_innovation_score: 0.5           # Minimum novelty requirement
  minimum_aec_relevance: 0.7              # Minimum AEC workflow relevance
  maximum_implementation_complexity: 0.8   # Maximum allowable complexity
  
  # Generation categories (systematic coverage)
  categories:
    - name: "Selection and Filtering Tools"
      target_count: 50
      focus_areas:
        - "Smart selection algorithms"
        - "Advanced filtering capabilities"
        - "Geometric analysis tools"
        - "Parameter-based selection"
    
    - name: "Model Management and Analysis"
      target_count: 50
      focus_areas:
        - "Model health monitoring"
        - "Performance optimization"
        - "Quality assurance automation"
        - "Coordination tools"
    
    - name: "Documentation and Reporting"
      target_count: 50
      focus_areas:
        - "Automated documentation"
        - "Report generation"
        - "Drawing coordination"
        - "Export management"
    
    - name: "Automation and Workflow"
      target_count: 50
      focus_areas:
        - "Workflow automation"
        - "Parameter management"
        - "Family coordination"
        - "Process optimization"
    
    - name: "Analysis and Simulation"
      target_count: 50
      focus_areas:
        - "Performance analysis"
        - "Environmental simulation"
        - "Structural analysis preparation"
        - "MEP system analysis"

# IMPLEMENTATION SPECIFICATION CONFIGURATION
implementation:
  # Specification completeness requirements (Addressing Critical Issue #4)
  mandatory_specification_elements:
    - "api_requirements"                  # Required Revit/Revitron API calls
    - "implementation_complexity"         # Development effort estimation
    - "external_dependencies"             # External library requirements
    - "revit_version_compatibility"       # Supported Revit versions
    - "testing_strategy"                  # Validation and testing approach
    - "error_handling_requirements"       # Error scenarios and handling
    - "performance_considerations"        # Performance impact analysis
    - "code_examples"                     # Implementation templates
  
  # Complexity assessment factors
  complexity_factors:
    api_call_weight: 0.2                 # Weight of API complexity
    external_dependency_weight: 0.3       # Weight of external dependencies
    ui_complexity_weight: 0.2            # Weight of UI implementation
    data_processing_weight: 0.2           # Weight of data processing requirements
    integration_weight: 0.1              # Weight of PyRevit integration complexity
  
  # Code generation settings
  code_generation:
    template_language: "python"          # Primary language for templates
    include_error_handling: true         # Include comprehensive error handling
    include_logging: true                # Include logging infrastructure
    include_type_hints: true             # Include Python type hints
    documentation_standard: "google"      # Documentation style (google, sphinx, numpy)

# QUALITY ASSURANCE CONFIGURATION
quality_assurance:
  # Quality gates (ALL must pass)
  mandatory_quality_gates:
    - "research_completeness"            # 100% research completion
    - "capability_mapping"               # Existing functionality mapped
    - "suggestion_generation"            # Quality suggestions generated  
    - "implementation_specs"             # Complete specifications created
    - "comprehensive_validation"         # 100% validation coverage achieved
  
  # Performance tracking
  performance_metrics:
    track_execution_time: true
    track_memory_usage: true
    track_api_response_times: true
    generate_performance_reports: true
  
  # Reporting configuration
  reporting:
    generate_executive_summary: true
    include_detailed_metrics: true
    include_recommendations: true
    include_implementation_roadmap: true
    output_formats: ["markdown", "json", "html"]

# LOGGING CONFIGURATION
logging:
  level: "INFO"                          # DEBUG, INFO, WARNING, ERROR, CRITICAL
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  handlers:
    - type: "console"
      level: "INFO"
    - type: "file"
      level: "DEBUG"
      filename: "logs/framework_execution.log"
      max_bytes: 10485760                # 10MB
      backup_count: 5

# OUTPUT CONFIGURATION  
output:
  # Directory structure
  base_output_dir: "reports"
  subdirectories:
    research: "01_research_analysis"
    validation: "02_validation_results"
    implementation: "03_implementation_specs"
    quality: "04_quality_reports"
  
  # File naming conventions
  timestamp_format: "%Y%m%d_%H%M%S"
  filename_templates:
    research_report: "research_analysis_{timestamp}.md"
    validation_report: "validation_results_{timestamp}.json"
    implementation_specs: "implementation_specs_{timestamp}.md"
    executive_summary: "executive_summary_{timestamp}.md"

# DEVELOPMENT CONFIGURATION
development:
  # Debug settings
  debug_mode: false
  verbose_logging: false
  save_intermediate_results: true
  
  # Testing configuration
  run_integration_tests: true
  mock_external_apis: false
  test_data_directory: "tests/test_data"
  
  # Performance optimization
  enable_caching: true
  cache_directory: "cache"
  cache_expiry_hours: 24
  parallel_processing: true
  max_worker_threads: 4

# INTEGRATION CONFIGURATION
integrations:
  # External tool integrations
  selenium_webdriver: "chrome"           # chrome, firefox, safari
  selenium_driver_path: null             # null = use system PATH
  
  # API integrations  
  github_integration: false              # Enable GitHub API integration
  documentation_apis: []                 # Additional documentation APIs
  
  # Export integrations
  export_to_github: false                # Auto-export results to GitHub
  export_to_confluence: false           # Export to Confluence (if configured)

# ERROR HANDLING CONFIGURATION
error_handling:
  # Failure tolerance
  max_retry_attempts: 3
  retry_delay_seconds: 5
  fail_fast_on_critical_errors: true
  
  # Error categories
  critical_errors:
    - "research_access_failure"          # Cannot access primary documentation
    - "validation_coverage_incomplete"   # Less than 100% validation coverage
    - "duplicate_suggestions_generated"  # Duplicate functionality suggested
  
  # Recovery strategies
  recovery_strategies:
    research_failure: "try_alternative_sources"
    validation_failure: "require_manual_review"
    generation_failure: "reduce_scope_and_retry"

# FRAMEWORK METADATA
metadata:
  version: "2.0"
  codename: "Self-Reflection-Integrated"
  repository: "https://github.com/mohammedhadeez/revitron-ui-enhancement-framework"
  documentation: "https://github.com/mohammedhadeez/revitron-ui-enhancement-framework/blob/main/docs/"
  support_email: "framework-support@example.com"
  license: "MIT"
  
  # Performance commitments
  performance_commitments:
    research_quality: "10/10 (improved from 6/10)"
    content_innovation: "10/10 (improved from 7/10)"
    technical_accuracy: "10/10 (improved from 5/10)"
    validation_thoroughness: "10/10 (improved from 4/10)"
    implementation_depth: "10/10 (improved from 5/10)"
