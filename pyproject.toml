[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "revitron-ui-enhancement-framework"
version = "2.0.0"
description = "Production-ready system for systematic Revitron UI enhancement with validated, implementable button suggestions"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Revitron UI Enhancement Team", email = "contact@example.com"}
]
maintainers = [
    {name = "Revitron UI Enhancement Team", email = "contact@example.com"}
]
keywords = [
    "revitron",
    "pyrevit", 
    "revit",
    "bim",
    "architecture",
    "aec",
    "automation",
    "ui",
    "enhancement",
    "framework",
    "validation",
    "quality-assurance",
    "construction",
    "building-information-modeling",
    "cad",
    "engineering"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Other Audience",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: User Interfaces",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: MacOS",
    "Environment :: Console",
    "Environment :: Other Environment",
    "Natural Language :: English"
]
requires-python = ">=3.7"
dependencies = [
    "requests>=2.25.0",
    "PyYAML>=6.0",
    "beautifulsoup4>=4.9.0",
    "lxml>=4.6.0",
    "jinja2>=3.0.0",
    "click>=8.0.0",
    "colorama>=0.4.4",
    "tqdm>=4.62.0",
    "psutil>=5.8.0",
    "packaging>=21.0",
    "importlib-metadata>=4.0.0; python_version<'3.8'",
    "typing-extensions>=4.0.0; python_version<'3.8'"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0",
    "pytest-xdist>=3.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
    "tox>=3.25.0",
    "coverage[toml]>=6.0.0"
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0",
    "pytest-xdist>=3.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-timeout>=2.1.0",
    "coverage[toml]>=6.0.0"
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
    "sphinxcontrib-napoleon>=0.7",
    "sphinx-autodoc-typehints>=1.19.0",
    "sphinx-copybutton>=0.5.0"
]
lint = [
    "black>=22.0.0",
    "flake8>=5.0.0",
    "flake8-docstrings>=1.6.0",
    "flake8-import-order>=0.18.0",
    "mypy>=0.991",
    "isort>=5.10.0"
]
all = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0",
    "pytest-xdist>=3.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-timeout>=2.1.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "flake8-docstrings>=1.6.0",
    "flake8-import-order>=0.18.0",
    "mypy>=0.991",
    "isort>=5.10.0",
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
    "sphinxcontrib-napoleon>=0.7",
    "sphinx-autodoc-typehints>=1.19.0",
    "sphinx-copybutton>=0.5.0",
    "pre-commit>=2.20.0",
    "tox>=3.25.0",
    "coverage[toml]>=6.0.0"
]

[project.urls]
"Homepage" = "https://github.com/mohammedhadeez/revitron-ui-enhancement-framework"
"Documentation" = "https://github.com/mohammedhadeez/revitron-ui-enhancement-framework/blob/main/docs/README.md"
"Repository" = "https://github.com/mohammedhadeez/revitron-ui-enhancement-framework"
"Bug Reports" = "https://github.com/mohammedhadeez/revitron-ui-enhancement-framework/issues"
"Framework Guide" = "https://github.com/mohammedhadeez/revitron-ui-enhancement-framework/blob/main/docs/FRAMEWORK.md"
"API Reference" = "https://github.com/mohammedhadeez/revitron-ui-enhancement-framework/blob/main/docs/API_REFERENCE.md"
"Usage Examples" = "https://github.com/mohammedhadeez/revitron-ui-enhancement-framework/blob/main/docs/USAGE_EXAMPLES.md"
"Changelog" = "https://github.com/mohammedhadeez/revitron-ui-enhancement-framework/blob/main/CHANGELOG.md"
"Contributing" = "https://github.com/mohammedhadeez/revitron-ui-enhancement-framework/blob/main/CONTRIBUTING.md"

[project.scripts]
revitron-enhance = "main_controller:main"
revitron-validate = "src.validation.validation_engine:main"
revitron-research = "src.research.research_framework:main"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "config*"]
exclude = ["tests*", "docs*", "*.tests.*", "__pycache__*", "*.pyc*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.md", "*.txt"]

# =============================================================================
# Tool Configuration
# =============================================================================

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = [
    "tests"
]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=85",
    "-v"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "performance: Performance tests",
    "slow: Slow running tests",
    "network: Tests requiring network access",
    "research: Tests for research framework",
    "validation: Tests for validation engine",
    "generation: Tests for button generation",
    "implementation: Tests for implementation specs",
    "quality: Tests for quality control"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
timeout = 300

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "tests/*",
    "setup.py",
    "*/site-packages/*",
    "*/__pycache__/*",
    "*/migrations/*"
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.black]
line-length = 88
target-version = ['py37', 'py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]
skip_glob = ["*/migrations/*", "*/__pycache__/*"]
known_first_party = ["src"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.flake8]
max-line-length = 88
max-complexity = 10
select = ["E", "F", "W", "C90"]
ignore = [
    "E203",  # whitespace before ':' (conflicts with black)
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator (conflicts with black)
    "F401",  # imported but unused (handled by other tools)
]
exclude = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    ".tox",
    "build",
    "dist",
    "*.egg-info",
    "migrations"
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:F401,F811"
]

[tool.mypy]
python_version = "3.7"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "conftest"
]
ignore_errors = true

[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = True
envlist = py37,py38,py39,py310,py311,lint,docs

[testenv]
deps = 
    pytest>=7.0.0
    pytest-cov>=4.0.0
    pytest-mock>=3.8.0
    pytest-xdist>=3.0.0
commands = 
    pytest {posargs}

[testenv:lint]
deps = 
    black>=22.0.0
    flake8>=5.0.0
    mypy>=0.991
    isort>=5.10.0
commands = 
    black --check .
    flake8 .
    mypy src/
    isort --check-only .

[testenv:docs]
deps = 
    sphinx>=5.0.0
    sphinx-rtd-theme>=1.0.0
    myst-parser>=0.18.0
commands = 
    sphinx-build -W -b html docs docs/_build/html

[testenv:coverage]
deps = 
    pytest>=7.0.0
    pytest-cov>=4.0.0
    coverage[toml]>=6.0.0
commands = 
    pytest --cov=src --cov-report=term-missing --cov-report=html --cov-fail-under=85
"""

# =============================================================================
# Build Configuration
# =============================================================================

[tool.wheel]
universal = false

[tool.bdist_wheel]
universal = false

[tool.setuptools_scm]
write_to = "src/_version.py"
version_scheme = "post-release"
local_scheme = "dirty-tag"

# =============================================================================
# Development Tools Configuration  
# =============================================================================

[tool.pre-commit]
default_stages = ["commit", "push"]
default_language_version = { python = "python3" }

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

[tool.pylint]
load-plugins = ["pylint.extensions.docparams"]

[tool.pylint.messages_control]
disable = [
    "missing-module-docstring",
    "missing-class-docstring", 
    "missing-function-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements"
]

[tool.pylint.format]
max-line-length = 88

# =============================================================================
# Framework-Specific Configuration
# =============================================================================

[tool.revitron-framework]
version = "2.0.0"
codename = "Self-Reflection Integrated"
config_file = "config/framework_config.yaml"
log_level = "INFO"

[tool.revitron-framework.quality]
target_performance = "10/10"
validation_coverage_required = 100
research_completeness_threshold = 95
duplicate_tolerance = 0

[tool.revitron-framework.features]
self_reflection_integration = true
critical_issues_addressed = [
    "failed_primary_documentation_access",
    "incomplete_validation_coverage", 
    "existing_functionality_duplicates",
    "insufficient_technical_depth"
]

[tool.revitron-framework.performance]
max_suggestions = 250
batch_size = 50
parallel_processing = true
max_workers = 4

# =============================================================================
# Metadata for Package Discovery
# =============================================================================

[tool.setuptools.dynamic]
# Dynamic versioning could be added here if using setuptools_scm
# version = {attr = "src.__version__"}

# =============================================================================
# Publishing Configuration
# =============================================================================

[tool.semantic_release]
version_toml = "pyproject.toml:project.version"
branch = "main"
upload_to_pypi = false
upload_to_release = true
build_command = "pip install build && python -m build"

# =============================================================================
# IDE Configuration Hints
# =============================================================================

# VS Code settings suggestions
[tool.vscode]
recommended_extensions = [
    "ms-python.python",
    "ms-python.flake8", 
    "ms-python.black-formatter",
    "ms-python.mypy-type-checker",
    "redhat.vscode-yaml",
    "yzhang.markdown-all-in-one"
]

# PyCharm configuration hints
[tool.pycharm]
inspection_profiles = "project_default"
code_style = "black"
interpreter_options = "-O"

# =============================================================================
# Documentation Configuration
# =============================================================================

[tool.sphinx]
source_dir = "docs"
build_dir = "docs/_build"
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.viewcode", 
    "sphinx.ext.napoleon",
    "myst_parser"
]

# =============================================================================
# Security Configuration
# =============================================================================

[tool.safety]
# Known security vulnerabilities to ignore (if any)
ignore = []

[tool.pip-audit]
# Configuration for pip-audit security scanning
require_hashes = false
index_url = "https://pypi.org/simple/"
